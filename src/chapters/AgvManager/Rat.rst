
*******************
RAT
*******************

RAT
====

:ref:`figrat` is a CAD software, aimed to design maps and convert them into a formatted ASCII file with ``.map`` extension. RAT save the created files as ``xml file``. A map can also be created using a text editor following some rules.

RAT can load ``dxf`` files as background, that can be used as a guide to design the desired map. Mainly RAT have lines, points, vehicles. These component will be explained later.

In the properties of the project some settings have to be changed in order to change the behavior of the AGV motion, for example ``Trasversal navigation`` is set by default to ``disabled``. When it is enabled the AGV can move trasversally to a line, and some options will be added to points that are not visible before. If some required point's options are not visible, check if this property is not set to ``enabled``.

Properties depend on the type of guidance. Different guidance have different options. In RAT can be found Magnetic tape, Inertial and laser guided AGVs.

.. _figrat:
.. figure:: images/rat/rat.gif
    :align: center
    :name:
    :figwidth: 600px

    RAT

    RAT main windows

.. note:: When changing a property, it should be confirmed by pressing the ``enter`` key.

When a map is completed the ``.map`` file should be generated. It can be generated by the icon on the toolbar, ``the gear with the text map`` or ``File, Generate map``. If the map can't be generated, check the errors list.
Map
================
A map is composed by lines, points, crosses and vehicles. During the design of a map some constraint and configuration can be set. For example speed, direction of movement.

A map in RAT is saved as ``xml`` file, and converted to a formatted text file with extension ``.map``.

It is important to set the ``Map Name``, thi property is found in the document property. It is engough to click in an empty space of the map to show it. It is a good practice to wirte also the date and the version of the map in this field, e.g. ``Map Name = Test map 2018-08-23 v2.0.3``. The property ``Map Name`` is read also by the controller software.

Vehicle
-------------------
We can define the number of vehicles present in a plant, their shapes and dimensions. In our discussion we suppose a vehicle have an orientaion, a coordinate systems attached to it. We can imagine the vectors (arrow) :math:`\overrightarrow{BF}` and :math:`\overrightarrow{RL}` as coordinate system axis, i.e. :math:`\overrightarrow{x}=\overrightarrow{OF}` and :math:`\overrightarrow{y}=\overrightarrow{OL}`.

If we have more than one Agv, it is convenient to set different colors, we can do it changing the property ``Enabled Colour``. The default value is white ``(255,255,255)``.

.. _figagvOrient:
.. figure:: images/rat/agvOrient.png
    :align: center
    :name:
    :figwidth: 300px

    Vehicle orientation

Lines
-------------------
A line have mainly 2 properties, beside its location and origin, ``Navigation direction`` and ``vehicle orientation``. A line have to be seen as a vector, :math:`\overrightarrow{L}`. For example a vector :math:`\overrightarrow{OX}` has opposite direction of vector :math:`\overrightarrow{XO}`, note that :math:`\overrightarrow{OX}=-\overrightarrow{XO}`.

.. figure:: images/rat/map_line.png
    :align: center
    :name:
    :figwidth: 300px

    Line or vector. Direction of motion

.. figure:: images/rat/map_line_prop.png
    :align: center
    :name:
    :figwidth: 300px

    Line property. Navigation type can be set : side, longitudinal or both

Two directions of motion are allowed: Forward and backward. Forward direction is shown by the arrow on the line, that is the positive movement, from :math:`O` to :math:`X` represented by :math:`\overrightarrow{OX}`.

The vehicle can move longitudinally to the line, i.e. :math:`\overrightarrow{BF}` parallel to the line, or transversally (side navigation), i.e. :math:`\overrightarrow{BF}` perpendicular to the line.

.. figure:: images/rat/agv_navigation_long.png
    :align: center
    :name:
    :figwidth: 300px

    Longitudinal navigation. :math:`\overrightarrow{BF}` parallel to the line.

.. figure:: images/rat/agv_navigation_side.png
    :align: center
    :name:
    :figwidth: 300px

    Side or traversal navigation. :math:`\overrightarrow{BF}` perpendicular to the line.

Precisely a line is a vector. The first point drawn :math:`P_{1}` (first mouse click) define the origin of the vector, the second point :math:`P_{2}` determine its direction. So the line is defined as :math:`\overrightarrow{P_{1}P_{2}}`. The origin can be moved changing the parameter origin, when it is different from zero we can see the arrow on the line move, the position of the origin is calculated always from :math:`P_{1}`.

Generic point
---------------
There are 6 :ref:`figkindpoints`. In term of object oriented approach we may say that all points derive from the base class Point.
Those points share the following basic properties: Quote (position on the line), speed of the vehicle beginin from the point toward positive direction, direction (as a reference the line where the point is placed) and orientation (referred to the vehicle).

.. _figkindpoints:
.. figure:: images/rat/map_points.png
    :align: center
    :name:
    :figwidth: 300px

    kind of points

Genric points are used mainly to build the path of the vehicle. It is not necessary to assign a code to a generic point. AgvManager automatically assign codes to Generic points that don't have one.

The following discussion can be applied to all kind of points, that have the properties direction and orientation (generic, user, cross, magnet, start, battery).

.. _figGenericPoint:
.. figure:: images/rat/map_point_gen_prop.png
    :align: center
    :name:
    :figwidth: 300px

    Generic point property


There are three allowed directions to approach and leave a point: ``Forward(F)``, ``Backward (R)`` and ``Anydirection (X)``.
The allowed direction of point e.g. :math:`P_{1}` is meant as the direction of motion of the vehicle starting from this point toward another point in the positive direction of the line.

For example, if we set the allowed direction of point :math:`P_{1}` to Forward , and we want to move from :math:`P_{1}` to point :math:`P_{2}` placed at a coordinate greater than :math:`P_{1}`, the motion is allowed. But the motion from :math:`P_{2}` to :math:`P_{1}` is not allowed. The direction in point :math:`P_{1}` assign the direction of motion starting from itself toward positive coordiantes, where it will be interrupted by another point.

.. _figpointdirection:
.. figure:: images/rat/pointdirection.png
    :align: center
    :name:
    :figwidth: 300px

    Line from left to right.

    :math:`P_{1}` Forward direction, :math:`P_{2}` Backward direction. Motion from :math:`P_{1}` to :math:`P_{2}` is allowed, from :math:`P_{2}` to :math:`P_{1}` is not allowed. Motion from :math:`P_{2}` to :math:`P_{3}` is forbidden. Motion from :math:`P_{3}` to :math:`P_{2}` is allowed

.. _figmap1:
.. figure:: images/rat/map1.png
    :align: center
    :name:
    :figwidth: 300px

    Point allowed direction

    :math:`P_{1}` allowed direction is set to Forward. Motion from :math:`P_{1}` to :math:`P_{2}` crossing :math:`C_{1}` is allowed, because in :math:`C_{1}` the direction is not restricted, and because :math:`P_{2}` is not in the growing coordinate starting from :math:`P_{1}`.

The allowed orientation is referred to the vehicle fig. :ref:`figagvOrient`. A point have 7 allowed orientations. For example if the Front orientation is selected, the vehicle when is moving on the line, :math:`\overrightarrow{BF}` have the same orientation of the line :math:`\overrightarrow{L}`. A Front orientation on point :math:`P_{1}`, mean that the vehicle when moving from :math:`P_{1}` to positive coordinates the orientation of the vehicle is Front.

Semaphores can be created using any points except magnet point. When ``semaphore index`` is 0, there is no semaphore defined. When the index is positive the point define the semaphore start, when it is negative the point define semaphore stop. The semaphore is a rectangluar area, with width define by the parameter ``semaphore width``, and length defined by the position of the start and stop points.

Can also be created array of points of a selected kind on a line.

User point
-----------
User point are like generic point, but they are associated to operations. For example, loading and unloading operations can be associated to user points. Information about the operations done on user points can be written on a database.

A user point should have the ``code`` property not empty, but a generic point code could be empty. A point belong to a line, if we have for example a matrix of points and lines, let's suppose the points belong to the horizontal line, if we need to move vertically from a point to another, we can't do it, we need a cross point.


User kind ???????????

Side ?????????????

.. _figuserpoint:
.. figure:: images/rat/map_point_user.png
    :align: center
    :name:
    :figwidth: 300px

    User point properties

Battery point
--------------
CBats are battery points, i.e. charging station position. This point have the properties kind, index, side and the properties that derive from a generic point.

CBats Kind ???????

Side ????????????

Display ?????????????

.. _figcbatpoint:
.. figure:: images/rat/map_point_cbats.png
    :align: center
    :name:
    :figwidth: 300px

    Battery point properties

Magnet point
-------------
A magnet point have the similar properties as a generic point, but is not used for path construction. A magnet point is used for position adjustment and reference. Every magnet point should have an Rfid code, this code must be unique.

Side offset ???????

Magnet type ???????

Forward mode ?????????/

Backword mode ??????????

A magnet point must be installed at 0.5 m from a curve. For example if we have a cross of type curve, and 1 meter of takeoff distance, 2 magnet points have to be installed at least at 1.5m from the cross.

.. _figmagnetpoint:
.. figure:: images/rat/map_point_magnet.png
    :align: center
    :name:
    :figwidth: 300px

    Magnet point properties

Start point
-------------
A start point is used as a home reference for a vehicle. A vehicle, once turned on, doesn't know his absolute position. Start point, associated with magnet point can be used to establish the pose (position and orientation) of a vehicle.
In one map we may have more than one start point for one vehicle, pay attention to set the property ``Start index`` that should be unique number. If the index is not unique for start points RAT doesn't give any error (like for user points), but AgvManager will give an error when loading the map.

A reference position is composed from one start point and 2 magnet points. The position (quote) of the start point should be the same of one of the 2 magnet points.

Starting orientation ??????????

.. _figmap_point_start:
.. figure:: images/rat/map_point_start.png
    :align: center
    :name:
    :figwidth: 300px

    Start point properties

Cross
-------

A cross is the intersection of 2 lines. An intersection have 4 quadrants. You can establish permission for vehicle in one or more quadrants. Three kinds of permission are available: ``Forbidden``, ``curve`` and ``rotation``.

.. _figcross:
.. figure:: images/rat/cross.png
    :align: center
    :name:
    :figwidth: 300px

    A cross is a point that joint two lines.

    It behave like a point on every line, orientation and direction can be set for every line independently.

A curve can be of 2 different types:
  - 0- Odometric curve
  - 1- Tape curve with 3 segments

``Divieti`` is an 8 bit mask, the first 4 bits indicate the allowance of passing from line A to line B, and the second 4 bits indicate the passing from line B to A.

``Occupable`` indicate if the quadrant is occupable, when the agv rotate around itself, if the value is yes, the agv can cross the quadrant while rotating. If all 4 value are no, for the 4 quadrante the agv can only rotate the wheels is the passage mode is rotation.

Under the fields, points on line A and B, we can set the allowed direction an orientations for each line.

Override angle??????

Tips
======

- A reference point is composed from a start point and 2 magnets.
- A curve should have 2 magnets placed at least at 0.5 meter from the end of the curve.
- User points and generic points should be placed after the magnet points that form the curve.

.. _figcurve_points:
.. figure:: images/rat/curve_points.png
    :align: center
    :name:
    :figwidth: 300px

    Generic points and user points should be placed outside a curve, i.e. after a magnet point

Example
=========

.. _demomap:
.. figure:: images/rat/demomap.png
    :align: center
    :name:
    :figwidth: 400px

    Demo map

    This illustrate a store represented by an array of user points. Two loading stations and one loading station.

:download:`Here is a map drawing in RAT<listing/rat/demo_map.xml>`

:download:`Here is a dxf file, that represent the layout of the testing place <listing/rat/demo_layout.dxf>`

:download:`Here is the generated map <listing/rat/map.map>`
